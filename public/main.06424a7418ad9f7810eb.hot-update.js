"use strict";
self["webpackHotUpdatenode_template"]("main",{

/***/ "./app/utils/text.js":
/*!***************************!*\
  !*** ./app/utils/text.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   calculate: () => (/* binding */ calculate),
/* harmony export */   split: () => (/* binding */ split)
/* harmony export */ });
/* eslint-disable no-param-reassign */
function splitText(text, expression) {
  const splits = text.split("<br>");
  let words = [];
  splits.forEach((item, index) => {
    if (index > 0) {
      words.push("<br>");
    }
    words = words.concat(item.split(expression));
    let isLink = false;
    let link = "";
    const innerHTML = [];
    words.forEach(word => {
      if (!isLink && (word.includes("<a") || word.includes("<strong"))) {
        link = "";
        isLink = true;
      }
      if (isLink) {
        link += ` ${word}`;
      }
      if (isLink && (word.includes("/a>") || word.includes("/strong>"))) {
        innerHTML.push(link);
        link = "";
      }
      if (!isLink && link === "") {
        innerHTML.push(word);
      }
      if (isLink && (word.includes("/a>") || word.includes("/strong>"))) {
        isLink = false;
      }
    });
    words = innerHTML;
  });
  return words;
}
function parseLine(line) {
  if (line === "") {
    return line;
  }
  if (line === " ") {
    return "&nbsp;";
  }
  line = line.trim();
  return line === "<br>" ? "<br>" : `<span>${line}</span>${line.length > 1 ? " " : ""}`;
}
function split({
  element,
  expression = " ",
  append = true
}) {
  const words = splitText(element.innerHTML.toString().trim(), expression);
  let innerHTML = "";
  words.forEach(line => {
    if (line.indexOf("<br>") > -1) {
      const lines = line.split("<br>");
      lines.forEach((line, index) => {
        innerHTML += index > 0 ? `<br>${parseLine(line)}` : parseLine(line);
      });
    } else {
      innerHTML += parseLine(line);
    }
  });
  element.innerHTML = innerHTML;
  const spans = element.querySelectorAll("span");
  if (append) {
    spans.forEach(span => {
      const isSingleLetter = span.textContent.length === 1;
      const isNotEmpty = span.innerHTML.trim() !== "";
      const isNotAndCharacter = span.textContent !== "&";
      const isNotDashCharacter = span.textContent !== "-";
      if (isSingleLetter && isNotEmpty && isNotAndCharacter && isNotDashCharacter) {
        span.innerHTML = `${span.textContent}&nbsp;`;
      }
    });
  }
  return spans;
}
function calculate(spans) {
  const lines = [];
  let words = [];
  let position = spans[0].offsetTop;
  spans.forEach((span, index) => {
    if (span.offsetTop === position) {
      words.push(span);
    }
    if (span.offsetTop !== position) {
      lines.push(words);
      words = [];
      words.push(span);
      position = span.offsetTop;
    }
    if (index + 1 === spans.length) {
      lines.push(words);
    }
  });
  return lines;
}

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("4b5c0caf5ef291b9b035")
/******/ })();
/******/ 
/******/ }
);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,