"use strict";
self["webpackHotUpdatenode_template"]("main",{

/***/ "./app/components/Preloader.js":
/*!*************************************!*\
  !*** ./app/components/Preloader.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");
/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ogl */ "./node_modules/ogl/src/core/Texture.js");
/* harmony import */ var prefix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prefix */ "./node_modules/prefix/index.js");
/* harmony import */ var prefix__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(prefix__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var classes_Component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! classes/Component */ "./app/classes/Component.js");
/* harmony import */ var _utils_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/text */ "./app/utils/text.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_3__);






/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class extends classes_Component__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor({
    canvas
  }) {
    super({
      classes: {},
      element: ".preloader",
      elements: {
        title: ".preloader__text",
        number: ".preloader__number",
        numberText: ".preloader__number__text"
      }
    });
    this.canvas = canvas;
    this.counter = 0;
    this.transformPrefix = prefix__WEBPACK_IMPORTED_MODULE_0___default()("transform");
    window.TEXTURES = {};
    this.elements.spans = (0,_utils_text__WEBPACK_IMPORTED_MODULE_2__.split)({
      append: true,
      element: this.elements.title,
      expression: "<br>"
    });
    (0,lodash__WEBPACK_IMPORTED_MODULE_3__.each)(this.elements.spans, element => {
      (0,_utils_text__WEBPACK_IMPORTED_MODULE_2__.split)({
        append: false,
        element,
        expression: "<br>"
      });
    });
    this.createLoader();
  }
  createLoader() {
    this.animateIn = gsap__WEBPACK_IMPORTED_MODULE_4__.gsap.timeline();
    this.animateIn.set(this.elements.title, {
      autoAlpha: 1
    });
    (0,lodash__WEBPACK_IMPORTED_MODULE_3__.each)(this.elements.spans, (line, index) => {
      const letters = document.querySelectorAll("span");
      const onStart = _ => {
        gsap__WEBPACK_IMPORTED_MODULE_4__.gsap.fromTo(letters, {
          autoAlpha: 0,
          display: "inline-block",
          y: "100%"
        }, {
          autoAlpha: 1,
          delay: 0.2,
          display: "inline-block",
          duration: 1,
          ease: "back.inOut",
          stagger: 0.015,
          y: "0%"
        });
      };
      this.animateIn.fromTo(line, {
        autoAlpha: 0,
        y: "100%"
      }, {
        autoAlpha: 1,
        delay: 0.2 * index,
        duration: 1.5,
        onStart,
        ease: "expo.inOut",
        y: "0%"
      }, "start");
    });
    this.animateIn.call(_ => {
      (0,lodash__WEBPACK_IMPORTED_MODULE_3__.each)(window.ASSETS, image => {
        const texture = new ogl__WEBPACK_IMPORTED_MODULE_5__.Texture(this.canvas.gl, {
          generateMipmaps: false
        });
        const media = new Image();
        media.crossOrigin = "anonymous";
        media.src = image;
        media.onload = _ => {
          texture.image = media;
          this.onAssetLoaded();
        };
        window.TEXTURES[image] = texture;
      });
    });
  }
  onAssetLoaded() {
    this.counter += 1;
    const percent = this.counter / window.ASSETS.length;
    this.elements.numberText.innerHTML = `${Math.round(percent * 100)}%`;
    if (percent === 1) {
      this.onComplete();
    }
  }
  onComplete() {
    return new Promise(() => {
      this.animateOut = gsap__WEBPACK_IMPORTED_MODULE_4__.gsap.timeline({
        delay: 1
      });
      (0,lodash__WEBPACK_IMPORTED_MODULE_3__.each)(this.elements.titleSpans, (line, index) => {
        const letters = line.querySelectorAll("span");
        const onStart = _ => {
          gsap__WEBPACK_IMPORTED_MODULE_4__.gsap.to(letters, {
            autoAlpha: 0,
            delay: 0.2,
            display: "inline-block",
            duration: 1,
            ease: "back.inOut",
            stagger: 0.015,
            y: "-100%"
          });
        };
        this.animateOut.to(line, {
          autoAlpha: 0,
          delay: 0.2 * index,
          duration: 1.5,
          onStart,
          ease: "expo.inOut",
          y: "-100%"
        }, "start");
      });
      this.animateOut.to(this.elements.numberText, {
        autoAlpha: 0,
        duration: 1,
        ease: SMOOTH
      }, "start");
      this.animateOut.to(this.element, {
        //! AVANT AVEC l'effet de tableau qui disparait
        // scaleY: 0,
        // transformOrigin: "0% 0%",
        // duration: 1.5,
        // ease: "expo.out",
        autoAlpha: 0,
        duration: 1
      });
      this.animateOut.call(() => {
        this.emit("completed");
      });
    });
  }
  destroy() {
    this.element.parentNode.removeChild(this.element);
  }
});

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("c698a6ee514a413ed451")
/******/ })();
/******/ 
/******/ }
);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5lZjQ4MzYyNGM4YTA5NDc4OTcwNS5ob3QtdXBkYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEyQjtBQUNFO0FBQ0Y7QUFFYztBQUNKO0FBQ1I7QUFFN0IsaUVBQWUsY0FBY0cseURBQVMsQ0FBQztFQUNyQ0csV0FBV0EsQ0FBQztJQUFFQztFQUFPLENBQUMsRUFBRTtJQUN0QixLQUFLLENBQUM7TUFDSkMsT0FBTyxFQUFFLENBQUMsQ0FBQztNQUNYQyxPQUFPLEVBQUUsWUFBWTtNQUNyQkMsUUFBUSxFQUFFO1FBQ1JDLEtBQUssRUFBRSxrQkFBa0I7UUFDekJDLE1BQU0sRUFBRSxvQkFBb0I7UUFDNUJDLFVBQVUsRUFBRTtNQUNkO0lBQ0YsQ0FBQyxDQUFDO0lBRUYsSUFBSSxDQUFDTixNQUFNLEdBQUdBLE1BQU07SUFFcEIsSUFBSSxDQUFDTyxPQUFPLEdBQUcsQ0FBQztJQUVoQixJQUFJLENBQUNDLGVBQWUsR0FBR2IsNkNBQU0sQ0FBQyxXQUFXLENBQUM7SUFFMUNjLE1BQU0sQ0FBQ0MsUUFBUSxHQUFHLENBQUMsQ0FBQztJQUVwQixJQUFJLENBQUNQLFFBQVEsQ0FBQ1EsS0FBSyxHQUFHZCxrREFBSyxDQUFDO01BQzFCZSxNQUFNLEVBQUUsSUFBSTtNQUNaVixPQUFPLEVBQUUsSUFBSSxDQUFDQyxRQUFRLENBQUNDLEtBQUs7TUFDNUJTLFVBQVUsRUFBRTtJQUNkLENBQUMsQ0FBQztJQUVGZiw0Q0FBSSxDQUFDLElBQUksQ0FBQ0ssUUFBUSxDQUFDUSxLQUFLLEVBQUVULE9BQU8sSUFBSTtNQUNuQ0wsa0RBQUssQ0FBQztRQUNKZSxNQUFNLEVBQUUsS0FBSztRQUNiVixPQUFPO1FBQ1BXLFVBQVUsRUFBRTtNQUNkLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGLElBQUksQ0FBQ0MsWUFBWSxDQUFDLENBQUM7RUFDckI7RUFFQUEsWUFBWUEsQ0FBQSxFQUFHO0lBQ2IsSUFBSSxDQUFDQyxTQUFTLEdBQUd0Qixz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O01BRUYsSUFBSSxDQUFDc0IsVUFBVSxDQUFDbkIsSUFBSSxDQUFDLE1BQU07UUFDekIsSUFBSSxDQUFDdUIsSUFBSSxDQUFDLFdBQVcsQ0FBQztNQUN4QixDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7RUFDSjtFQUVBQyxPQUFPQSxDQUFBLEVBQUc7SUFDUixJQUFJLENBQUN2RCxPQUFPLENBQUN3RCxVQUFVLENBQUNDLFdBQVcsQ0FBQyxJQUFJLENBQUN6RCxPQUFPLENBQUM7RUFDbkQ7QUFDRjs7Ozs7Ozs7VUM5TEEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub2RlLXRlbXBsYXRlLy4vYXBwL2NvbXBvbmVudHMvUHJlbG9hZGVyLmpzIiwid2VicGFjazovL25vZGUtdGVtcGxhdGUvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdzYXAgfSBmcm9tIFwiZ3NhcFwiXG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSBcIm9nbFwiXG5pbXBvcnQgUHJlZml4IGZyb20gXCJwcmVmaXhcIlxuXG5pbXBvcnQgQ29tcG9uZW50IGZyb20gXCJjbGFzc2VzL0NvbXBvbmVudFwiXG5pbXBvcnQgeyBzcGxpdCB9IGZyb20gXCIuLi91dGlscy90ZXh0XCJcbmltcG9ydCB7IGVhY2ggfSBmcm9tIFwibG9kYXNoXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcih7IGNhbnZhcyB9KSB7XG4gICAgc3VwZXIoe1xuICAgICAgY2xhc3Nlczoge30sXG4gICAgICBlbGVtZW50OiBcIi5wcmVsb2FkZXJcIixcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHRpdGxlOiBcIi5wcmVsb2FkZXJfX3RleHRcIixcbiAgICAgICAgbnVtYmVyOiBcIi5wcmVsb2FkZXJfX251bWJlclwiLFxuICAgICAgICBudW1iZXJUZXh0OiBcIi5wcmVsb2FkZXJfX251bWJlcl9fdGV4dFwiXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMuY2FudmFzID0gY2FudmFzXG5cbiAgICB0aGlzLmNvdW50ZXIgPSAwXG5cbiAgICB0aGlzLnRyYW5zZm9ybVByZWZpeCA9IFByZWZpeChcInRyYW5zZm9ybVwiKVxuXG4gICAgd2luZG93LlRFWFRVUkVTID0ge31cblxuICAgIHRoaXMuZWxlbWVudHMuc3BhbnMgPSBzcGxpdCh7XG4gICAgICBhcHBlbmQ6IHRydWUsXG4gICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnRzLnRpdGxlLFxuICAgICAgZXhwcmVzc2lvbjogXCI8YnI+XCJcbiAgICB9KVxuXG4gICAgZWFjaCh0aGlzLmVsZW1lbnRzLnNwYW5zLCBlbGVtZW50ID0+IHtcbiAgICAgIHNwbGl0KHtcbiAgICAgICAgYXBwZW5kOiBmYWxzZSxcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgZXhwcmVzc2lvbjogXCI8YnI+XCJcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRoaXMuY3JlYXRlTG9hZGVyKClcbiAgfVxuXG4gIGNyZWF0ZUxvYWRlcigpIHtcbiAgICB0aGlzLmFuaW1hdGVJbiA9IGdzYXAudGltZWxpbmUoKVxuXG4gICAgdGhpcy5hbmltYXRlSW4uc2V0KHRoaXMuZWxlbWVudHMudGl0bGUsIHtcbiAgICAgIGF1dG9BbHBoYTogMVxuICAgIH0pXG5cbiAgICBlYWNoKHRoaXMuZWxlbWVudHMuc3BhbnMsIChsaW5lLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgbGV0dGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJzcGFuXCIpXG5cbiAgICAgIGNvbnN0IG9uU3RhcnQgPSBfID0+IHtcbiAgICAgICAgZ3NhcC5mcm9tVG8oXG4gICAgICAgICAgbGV0dGVycyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBhdXRvQWxwaGE6IDAsXG4gICAgICAgICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiLFxuICAgICAgICAgICAgeTogXCIxMDAlXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGF1dG9BbHBoYTogMSxcbiAgICAgICAgICAgIGRlbGF5OiAwLjIsXG4gICAgICAgICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiLFxuICAgICAgICAgICAgZHVyYXRpb246IDEsXG4gICAgICAgICAgICBlYXNlOiBcImJhY2suaW5PdXRcIixcbiAgICAgICAgICAgIHN0YWdnZXI6IDAuMDE1LFxuICAgICAgICAgICAgeTogXCIwJVwiXG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIHRoaXMuYW5pbWF0ZUluLmZyb21UbyhcbiAgICAgICAgbGluZSxcbiAgICAgICAge1xuICAgICAgICAgIGF1dG9BbHBoYTogMCxcbiAgICAgICAgICB5OiBcIjEwMCVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgYXV0b0FscGhhOiAxLFxuICAgICAgICAgIGRlbGF5OiAwLjIgKiBpbmRleCxcbiAgICAgICAgICBkdXJhdGlvbjogMS41LFxuICAgICAgICAgIG9uU3RhcnQsXG4gICAgICAgICAgZWFzZTogXCJleHBvLmluT3V0XCIsXG4gICAgICAgICAgeTogXCIwJVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3RhcnRcIlxuICAgICAgKVxuICAgIH0pXG5cbiAgICB0aGlzLmFuaW1hdGVJbi5jYWxsKF8gPT4ge1xuICAgICAgZWFjaCh3aW5kb3cuQVNTRVRTLCBpbWFnZSA9PiB7XG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVGV4dHVyZSh0aGlzLmNhbnZhcy5nbCwge1xuICAgICAgICAgIGdlbmVyYXRlTWlwbWFwczogZmFsc2VcbiAgICAgICAgfSlcblxuICAgICAgICBjb25zdCBtZWRpYSA9IG5ldyBJbWFnZSgpXG5cbiAgICAgICAgbWVkaWEuY3Jvc3NPcmlnaW4gPSBcImFub255bW91c1wiXG4gICAgICAgIG1lZGlhLnNyYyA9IGltYWdlXG4gICAgICAgIG1lZGlhLm9ubG9hZCA9IF8gPT4ge1xuICAgICAgICAgIHRleHR1cmUuaW1hZ2UgPSBtZWRpYVxuXG4gICAgICAgICAgdGhpcy5vbkFzc2V0TG9hZGVkKClcbiAgICAgICAgfVxuXG4gICAgICAgIHdpbmRvdy5URVhUVVJFU1tpbWFnZV0gPSB0ZXh0dXJlXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBvbkFzc2V0TG9hZGVkKCkge1xuICAgIHRoaXMuY291bnRlciArPSAxXG5cbiAgICBjb25zdCBwZXJjZW50ID0gdGhpcy5jb3VudGVyIC8gd2luZG93LkFTU0VUUy5sZW5ndGhcblxuICAgIHRoaXMuZWxlbWVudHMubnVtYmVyVGV4dC5pbm5lckhUTUwgPSBgJHtNYXRoLnJvdW5kKHBlcmNlbnQgKiAxMDApfSVgXG5cbiAgICBpZiAocGVyY2VudCA9PT0gMSkge1xuICAgICAgdGhpcy5vbkNvbXBsZXRlKClcbiAgICB9XG4gIH1cblxuICBvbkNvbXBsZXRlKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgoKSA9PiB7XG4gICAgICB0aGlzLmFuaW1hdGVPdXQgPSBnc2FwLnRpbWVsaW5lKHtcbiAgICAgICAgZGVsYXk6IDFcbiAgICAgIH0pXG5cbiAgICAgIGVhY2godGhpcy5lbGVtZW50cy50aXRsZVNwYW5zLCAobGluZSwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgbGV0dGVycyA9IGxpbmUucXVlcnlTZWxlY3RvckFsbChcInNwYW5cIilcblxuICAgICAgICBjb25zdCBvblN0YXJ0ID0gXyA9PiB7XG4gICAgICAgICAgZ3NhcC50byhsZXR0ZXJzLCB7XG4gICAgICAgICAgICBhdXRvQWxwaGE6IDAsXG4gICAgICAgICAgICBkZWxheTogMC4yLFxuICAgICAgICAgICAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIixcbiAgICAgICAgICAgIGR1cmF0aW9uOiAxLFxuICAgICAgICAgICAgZWFzZTogXCJiYWNrLmluT3V0XCIsXG4gICAgICAgICAgICBzdGFnZ2VyOiAwLjAxNSxcbiAgICAgICAgICAgIHk6IFwiLTEwMCVcIlxuICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFuaW1hdGVPdXQudG8oXG4gICAgICAgICAgbGluZSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBhdXRvQWxwaGE6IDAsXG4gICAgICAgICAgICBkZWxheTogMC4yICogaW5kZXgsXG4gICAgICAgICAgICBkdXJhdGlvbjogMS41LFxuICAgICAgICAgICAgb25TdGFydCxcbiAgICAgICAgICAgIGVhc2U6IFwiZXhwby5pbk91dFwiLFxuICAgICAgICAgICAgeTogXCItMTAwJVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInN0YXJ0XCJcbiAgICAgICAgKVxuICAgICAgfSlcblxuICAgICAgdGhpcy5hbmltYXRlT3V0LnRvKFxuICAgICAgICB0aGlzLmVsZW1lbnRzLm51bWJlclRleHQsXG4gICAgICAgIHtcbiAgICAgICAgICBhdXRvQWxwaGE6IDAsXG4gICAgICAgICAgZHVyYXRpb246IDEsXG4gICAgICAgICAgZWFzZTogU01PT1RIXG4gICAgICAgIH0sXG4gICAgICAgIFwic3RhcnRcIlxuICAgICAgKVxuXG4gICAgICB0aGlzLmFuaW1hdGVPdXQudG8odGhpcy5lbGVtZW50LCB7XG4gICAgICAgIC8vISBBVkFOVCBBVkVDIGwnZWZmZXQgZGUgdGFibGVhdSBxdWkgZGlzcGFyYWl0XG4gICAgICAgIC8vIHNjYWxlWTogMCxcbiAgICAgICAgLy8gdHJhbnNmb3JtT3JpZ2luOiBcIjAlIDAlXCIsXG4gICAgICAgIC8vIGR1cmF0aW9uOiAxLjUsXG4gICAgICAgIC8vIGVhc2U6IFwiZXhwby5vdXRcIixcbiAgICAgICAgYXV0b0FscGhhOiAwLFxuICAgICAgICBkdXJhdGlvbjogMVxuICAgICAgfSlcblxuICAgICAgdGhpcy5hbmltYXRlT3V0LmNhbGwoKCkgPT4ge1xuICAgICAgICB0aGlzLmVtaXQoXCJjb21wbGV0ZWRcIilcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KVxuICB9XG59XG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCJjNjk4YTZlZTUxNGE0MTNlZDQ1MVwiKSJdLCJuYW1lcyI6WyJnc2FwIiwiVGV4dHVyZSIsIlByZWZpeCIsIkNvbXBvbmVudCIsInNwbGl0IiwiZWFjaCIsImNvbnN0cnVjdG9yIiwiY2FudmFzIiwiY2xhc3NlcyIsImVsZW1lbnQiLCJlbGVtZW50cyIsInRpdGxlIiwibnVtYmVyIiwibnVtYmVyVGV4dCIsImNvdW50ZXIiLCJ0cmFuc2Zvcm1QcmVmaXgiLCJ3aW5kb3ciLCJURVhUVVJFUyIsInNwYW5zIiwiYXBwZW5kIiwiZXhwcmVzc2lvbiIsImNyZWF0ZUxvYWRlciIsImFuaW1hdGVJbiIsInRpbWVsaW5lIiwic2V0IiwiYXV0b0FscGhhIiwibGluZSIsImluZGV4IiwibGV0dGVycyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsIm9uU3RhcnQiLCJfIiwiZnJvbVRvIiwiZGlzcGxheSIsInkiLCJkZWxheSIsImR1cmF0aW9uIiwiZWFzZSIsInN0YWdnZXIiLCJjYWxsIiwiQVNTRVRTIiwiaW1hZ2UiLCJ0ZXh0dXJlIiwiZ2wiLCJnZW5lcmF0ZU1pcG1hcHMiLCJtZWRpYSIsIkltYWdlIiwiY3Jvc3NPcmlnaW4iLCJzcmMiLCJvbmxvYWQiLCJvbkFzc2V0TG9hZGVkIiwicGVyY2VudCIsImxlbmd0aCIsImlubmVySFRNTCIsIk1hdGgiLCJyb3VuZCIsIm9uQ29tcGxldGUiLCJQcm9taXNlIiwiYW5pbWF0ZU91dCIsInRpdGxlU3BhbnMiLCJ0byIsIlNNT09USCIsImVtaXQiLCJkZXN0cm95IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIl0sInNvdXJjZVJvb3QiOiIifQ==